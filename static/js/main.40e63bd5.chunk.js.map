{"version":3,"sources":["useLife.ts","Plane.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useLife","React","useState","cicle","setCicle","stream","Array","y","x","Math","round","random","seed","setStream","rules","useCallback","e","next","forEach","row","col","state","neighbors","count","i","j","neighborwood","useEffect","timer","setTimeout","clearTimeout","height","width","setAlive","Been","isAlive","className","onClick","Plane","map","key","item","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.40e63bd5.chunk.js","sourcesContent":["import React from \"react\";\n\nconst useLife = () => {\n\tconst height = 18;\n\tconst width = 18;\n\n\tconst seed = () => {\n\t\tlet stream: boolean[][] = new Array(height);\n\t\tfor (var y = 0; y < height; y++) {\n\t\t\tstream[y] = new Array(width);\n\t\t\tfor (var x = 0; x < width; x++) {\n\t\t\t\tstream[y][x] = Math.round(Math.random()) === 1;\n\t\t\t}\n\t\t}\n\t\treturn stream;\n\t};\n\n\tconst neighborwood = (stream: boolean[][], y: number, x: number): number => {\n\t\tlet count = 0;\n\n\t\tfor (let i = -1; i < 2; i++) {\n\t\t\tfor (let j = -1; j < 2; j++) {\n\t\t\t\tconst row = (y + i + height) % height;\n\t\t\t\tconst col = (x + j + width) % width;\n\t\t\t\tif (stream[row][col]) count += 1;\n\t\t\t}\n\t\t}\n\n\t\tif (stream[y][x]) count -= 1;\n\t\treturn count;\n\t};\n\n\tlet [cicle, setCicle] = React.useState<number>(0);\n\tconst [stream, setStream] = React.useState<boolean[][]>(seed());\n\n\tconst rules = React.useCallback(() => {\n\t\tsetCicle((e) => (e += 1));\n\t\tlet next: boolean[][] = new Array(height);\n\t\tstream.forEach((row, y) => {\n\t\t\tnext[y] = new Array(width);\n\t\t\trow.forEach((col, x) => {\n\t\t\t\tconst state = stream[y][x];\n\t\t\t\tconst neighbors = neighborwood(stream, y, x);\n\n\t\t\t\tif (!state && neighbors === 3) {\n\t\t\t\t\tnext[y][x] = true;\n\t\t\t\t} else if (state && (neighbors < 2 || neighbors > 3)) {\n\t\t\t\t\tnext[y][x] = false;\n\t\t\t\t} else {\n\t\t\t\t\tnext[y][x] = stream[y][x];\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tsetStream(next);\n\t}, [stream]);\n\n\tReact.useEffect(() => {\n\t\tlet timer = setTimeout(() => {\n            rules();\n        }, 100)\n        return (()=> {\n            clearTimeout(timer)\n        });\n\t}, [cicle, rules]);\n\n\n    const setAlive = (y:number, x:number) => {\n        const next = stream;\n        next[y][x] = true\n        setStream([...next]);\n    }\n\n\treturn {\n\t\tcicle,\n\t\tstream,\n\t\theight,\n        width,\n        setAlive\n\t};\n}\n\nexport default useLife;","import React from \"react\";\nimport useLife from \"./useLife\";\nimport \"./Plane.css\";\n\nconst Been: React.FunctionComponent<{\n\tisAlive: boolean;\n\ty: number;\n\tx: number;\n\tclassName: string;\n\tonClick: (y: number, x: number) => void;\n}> = ({ isAlive, className, x, y, onClick }) => {\n\treturn (\n\t\t<div\n\t\t\tclassName={`been ${isAlive ? \"alive\" : \"dead\"} ${className}`}\n\t\t\tonClick={() => {\n\t\t\t\tonClick(y, x);\n\t\t\t}}></div>\n\t);\n};\n\nconst Plane: React.FunctionComponent = () => {\n\tconst { height, width, stream, setAlive } = useLife();\n\n\treturn (\n\t\t<div className='grid'>\n\t\t\t{[...new Array(height)].map((row, y) => (\n\t\t\t\t<div className='row' key={y}>\n\t\t\t\t\t{[...new Array(width)].map((item, x) => (\n\t\t\t\t\t\t<Been\n\t\t\t\t\t\t\tkey={x}\n\t\t\t\t\t\t\tclassName={`${y} ${x}`}\n\t\t\t\t\t\t\tx={x}\n\t\t\t\t\t\t\ty={y}\n\t\t\t\t\t\t\tonClick={setAlive}\n\t\t\t\t\t\t\tisAlive={stream[y][x]}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t))}\n\t\t</div>\n\t);\n};\n\nexport default Plane;\n","import React from \"react\";\nimport Plane from \"./Plane\";\nimport \"./App.css\";\n\nfunction App() {\n\treturn <Plane></Plane>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}